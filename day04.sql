--PLAYER 테이블에서 NATION이 NULL이 아니면 등록
--NULL이면 미등록으로 변경 후 선수이름, 국가 검색하기
--CASE문으로 사용
SELECT PLAYER_NAME "선수 이름",NATION AS 국가,
	CASE
	WHEN NATION IS NOT NULL THEN '등록'
	ELSE '미등록'
	END AS "국가 등록 여부"
FROM PLAYER;

--COALESCE(코얼레스) : 합치다, 연동하다
--NULL이 아니면 1차 선택,NULL이면 2차 선택,둘 다 NULL이면 NULL
--COALESCE(1차 선택,2차 선택)
SELECT PLAYER_NAME,NICKNAME,
	COALESCE(NICKNAME, PLAYER_NAME) AS KNOWN
FROM PLAYER;

--PLAYER 테이블에서 NICKNAME이 없으면 '별명 없음'으로 변경 후 검색
SELECT PLAYER_NAME,
	COALESCE(NICKNAME,'별명 없음') AS NICKNAME
FROM PLAYER;

--집계 함수(NULL은 포함하지 않는다!)
--여러개의 값을 하나의 값으로 나타냄(하나의 행)
--SELECT절 없이 단독으로 사용 불가 -> WHERE절에서는 사용할 수 없다.
--HAVING절에서 사용가능(그룹핑)
--AVG() 평균,MAX() 최댓값,MIN() 최솟값,SUM() 총합,COUNT() 갯수
SELECT AVG(HEIGHT),MAX(HEIGHT),MIN(HEIGHT),SUM(HEIGHT) FROM PLAYER;
SELECT COUNT(HEIGHT) FROM PLAYER;
SELECT COUNT(PLAYER_ID) FROM PLAYER;

--PLAYER 테이블에서 HEIGHT 개수 검색(NULL포함해서 COUNT하기)
SELECT COUNT(NVL(HEIGHT,0)) FROM PLAYER;

--ORDER BY: 정렬
--ASC: 오름차순(생략가능, DEFAULT: 오름차순)
--DESC: 내림차순

--PLAYER 테이블에서 키 순으로 검색(오름차순)
SELECT PLAYER_NAME, HEIGHT FROM PLAYER
WHERE HEIGHT IS NOT NULL
ORDER BY HEIGHT;

--PLAYER 테이블에서 키 순으로 검색(내림차순)(NULL포함)
SELECT PLAYER_NAME, HEIGHT FROM PLAYER
ORDER BY HEIGHT DESC;

--PLAYER 테이블에서 키 순, 몸무게 순(오름차순)으로 검색
--첫번째 컬럼의 값이(기준이) 같으면, 두번째 컬럼을 통해 정렬
SELECT PLAYER_NAME,HEIGHT,WEIGHT FROM PLAYER
WHERE HEIGHT IS NOT NULL AND WEIGHT IS NOT NULL
ORDER BY HEIGHT,WEIGHT;

--GROUP BY: ~별로(예: 포지션 별 평균키)
--SELECT ??? FROM ???
--GROUP BY 컬럼명
--HAVING 조건식
--HAVING(GROUP BY의 조건절)

--PLAYER 테이블에서 포지션 검색
SELECT "POSITION" FROM PLAYER
GROUP BY "POSITION"
HAVING "POSITION" IS NOT NULL;

--WHERE절에서 조건을 처리할 수 있다면 반드시 WHERE절에서 먼저 처리해준다.
--HAVING절보다 더 효율적이다.
--GROUP으로 묶기 전에 먼저 조건에 맞지 않는 값을 걸러주고 GROUP으로 묶는다.
SELECT "POSITION" FROM PLAYER
WHERE "POSITION" IS NOT NULL
GROUP BY "POSITION";

SELECT "POSITION",AVG(HEIGHT)
FROM PLAYER
GROUP BY "POSITION"
HAVING "POSITION" IS NOT NULL;

--몸무게가 80이상인 선수들의 평균키가 180이상인 포지션
SELECT "POSITION",AVG(HEIGHT),MIN(WEIGHT) FROM PLAYER
WHERE WEIGHT>=80
GROUP BY "POSITION"
HAVING AVG(HEIGHT)>=180;

--EMPLOYEES 테이블에서 JOB_ID별로 평균 SALARY가 10000미만
--(SALARY 합계,평균,최댓값,최솟값,JOB_ID별 명수) 검색하기
--JOB_ID 알파벳 순으로 정렬
SELECT JOB_ID,SUM(SALARY),AVG(SALARY),MAX(SALARY),MIN(SALARY),COUNT(JOB_ID) FROM EMPLOYEES
GROUP BY JOB_ID
HAVING AVG(SALARY)<10000
ORDER BY JOB_ID;

--SUB_QUERY:SQL문 내부에 SQL문 선언
--FROM절		:IN LINE VIEW
--SELECT절	:SCALAR
--WHERE절	:SUB_QUERY


--IN LINE VIEW
--PLAYER 테이블에서 TEAM_ID가 'K01'인 선수 중에 POSITION이 'GK'인 선수
SELECT * FROM(
	SELECT * FROM PLAYER
	WHERE TEAM_ID='K01'
)WHERE POSITION='GK';

--WHERE만 사용하기
SELECT * FROM PLAYER
WHERE TEAM_ID='K01' AND "POSITION"='GK';

--PLAYER 테이블에서 평균키보다 작은 선수 검색
SELECT * FROM PLAYER
WHERE HEIGHT< (SELECT AVG(HEIGHT) FROM PLAYER);

--SCALAR SUB-QUERY(비효율적)
--전체 평균과 포지션별 평균 키 구하기
SELECT (SELECT AVG(HEIGHT) FROM PLAYER),"POSITION",AVG(HEIGHT)
FROM PLAYER
WHERE "POSITION" IS NOT NULL
GROUP BY "POSITION";

--대체방안
SELECT
	ROUND(AVG(CASE "POSITION" WHEN 'DF' THEN HEIGHT END),2) AS DF,
	ROUND(AVG(CASE WHEN "POSITION"='GK' THEN HEIGHT END),2) AS GK,
	ROUND(AVG(CASE WHEN "POSITION"='FW' THEN HEIGHT END),2) AS FW,
	ROUND(AVG(CASE "POSITION" WHEN 'MF' THEN HEIGHT END),2) AS MF,
	ROUND(AVG(HEIGHT),2) AS "전체 평균"
FROM PLAYER;

--PLAYER 테이블에서 NICKNAME이 NULL인 선수들은 정태민 선수의 닉네임으로 바꾸기
UPDATE PLAYER
SET NICKNAME=(SELECT NICKNAME FROM PLAYER WHERE PLAYER_NAME='정태민')
WHERE NICKNAME IS NULL;
SELECT * FROM PLAYER;

--NICKNAME이 NULL인 선수들의 이름도 정태민으로 바꾸기
UPDATE PLAYER
SET (PLAYER_NAME,NICKNAME)=
(SELECT PLAYER_NAME,NICKNAME FROM PLAYER WHERE PLAYER_NAME='정태민')
WHERE NICKNAME IS NULL;

--EMPLOYEES 테이블에서 평균급여보다 낮은 사람들의 급여를 10% 인상하기(UPDATE)
UPDATE EMPLOYEES
SET SALARY=(SALARY*1.1)
WHERE (SELECT AVG(SALARY) FROM EMPLOYEES)>SALARY;
SELECT SALARY FROM EMPLOYEES;

--PLAYER 테이블에서 평균키보다 큰 선수들 삭제
--DELETE FROM 테이블 WHERE 조건
DELETE FROM PLAYER
WHERE(SELECT AVG(HEIGHT) FROM PLAYER)<HEIGHT;
SELECT HEIGHT FROM PLAYER;
SELECT MAX(HEIGHT) FROM PLAYER;

SELECT ROUND(AVG(HEIGHT),2) FROM PLAYER;

--문자형 함수
--소문자, 대문자, ASCII코드,CHR
SELECT LOWER('BUS'),UPPER('bus'),ASCII('A'),CHR(65)
FROM DUAL;