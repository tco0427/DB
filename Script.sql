BEGIN
	DBMS_OUTPUT.PUT_LINE('HELLO');
END;
---------------------------------------------
--f(x)=2x+1
CREATE OR REPLACE PROCEDURE F(
--X IN NUMBER (IN생략가능)	
	X NUMBER)
IS
BEGIN
	DBMS_OUTPUT.ENABLE;
	DBMS_OUTPUT.PUT_LINE(2*X+1);
END;
CALL F(2);
DROP PROCEDURE F;
-------------------------------------
CREATE OR REPLACE PROCEDURE F(
	X IN OUT NUMBER)
IS
BEGIN
	X :=2*X+1;
END;

--PL/SQL에서 사용하는 모든 변수나 상수를 선언하는 부분으로서 DECLARE로 시작
DECLARE
	X NUMBER :=12;
BEGIN
	F(X);
	DBMS_OUTPUT.ENABLE;
	DBMS_OUTPUT.PUT_LINE(X);
END;

--JOBS테이블에 INSERT해주는 프로시저 만들기
SELECT * FROM JOBS;
CREATE OR REPLACE PROCEDURE JI
(
	P_JOB_ID IN JOBS.JOB_ID%TYPE,
	P_JOB_TITLE IN JOBS.JOB_TITLE%TYPE,
	P_MIN_SALARY IN JOBS.MIN_SALARY%TYPE,
	P_MAX_SALARY IN JOBS.MAX_SALARY%TYPE
)
IS
BEGIN
	INSERT INTO JOBS(JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY)
	VALUES(P_JOB_ID, P_JOB_TITLE, P_MIN_SALARY, P_MAX_SALARY);
	DBMS_OUTPUT.ENABLE;
	DBMS_OUTPUT.PUT_LINE('INSERT ALL DONE ABOUT' ||' '||P_JOB_ID);
END;
CALL JI('IT3','Developer',14000,20000);
--------------------위의 프로시져 오류->WHY?
--Declaration에서 END뒤에 ;가 없음->오류
--Declaration에서의 procedure가 정확해야함
CREATE OR REPLACE PROCEDURE 엄마나합격했어
(
	P_JOB_ID IN JOBS.JOB_ID%TYPE,
	P_JOB_TITLE IN JOBS.JOB_TITLE%TYPE,
	P_MIN_SALARY IN JOBS.MIN_SALARY%TYPE,
	P_MAX_SALARY IN JOBS.MAX_SALARY%TYPE
)
IS
BEGIN
	INSERT INTO JOBS(JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY)
	VALUES(P_JOB_ID, P_JOB_TITLE, P_MIN_SALARY, P_MAX_SALARY);
	DBMS_OUTPUT.ENABLE;
	DBMS_OUTPUT.PUT_LINE('INSERT ALL DONE ABOUT' ||' '||P_JOB_ID);
END;
CALL 엄마나합격했어('IT', 'Developer', 14000, 20000);
--------------------------------------------------------------------------
--CHR: 정수를 아스키코드로
--CHR(10): 라인피드(NEW LINE)
DECLARE
	SCORE NUMBER :=80;
	GRADE CHAR(1);
BEGIN
	IF SCORE >= 90 THEN GRADE := 'A';
	ELSIF SCORE >=80 THEN GRADE := 'B';
	ELSIF SCORE >=70 THEN GRADE := 'C';
	ELSIF SCORE >=60 THEN GRADE := 'D';
	ELSE GRADE:='F';
	END IF;
	DBMS_OUTPUT.ENABLE;
	DBMS_OUTPUT.PUT_LINE('당신의 점수: '||SCORE||'점'||CHR(10)||'학점: '||GRADE);
END;

--프로시저로 만들기
--점수를 받고 받은 점수로 점수와 학점 출력
CREATE OR REPLACE PROCEDURE GET_GRADE
(
	SCORE IN NUMBER
)
IS
BEGIN
	DBMS_OUTPUT.ENABLE;
	DBMS_OUTPUT.PUT_LINE(SCORE);
END;
CALL GET_GRADE(99);
------------------------------------------------------
--GET_GRADE에 들어가서 수정(DECLARATION)
CREATE OR REPLACE PROCEDURE HR.GET_GRADE
(
	SCORE IN NUMBER
)
IS
	GRADE CHAR(1);
BEGIN
IF SCORE >= 90 THEN GRADE := 'A';
	ELSIF SCORE >=80 THEN GRADE := 'B';
	ELSIF SCORE >=70 THEN GRADE := 'C';
	ELSIF SCORE >=60 THEN GRADE := 'D';
	ELSE GRADE:='F';
	END IF;
	DBMS_OUTPUT.ENABLE;
	DBMS_OUTPUT.PUT_LINE(SCORE);
END;
-----------------------------------------------------
--JOB_ID(PK)에 중복되는 값을 넣을 경우 무경성 조건에 위반
--그러므로 IF문을 사용해서 이미 JOB_ID가 존재하면 UPDATE
--존재하지 않으면 INSERT하도록 구현
--DECLARATION에서
CREATE OR REPLACE PROCEDURE 엄마나합격했어2
(
	P_JOB_ID IN JOBS.JOB_ID%TYPE,
	P_JOB_TITLE IN JOBS.JOB_TITLE%TYPE,
	P_MIN_SALARY IN JOBS.MIN_SALARY%TYPE,
	P_MAX_SALARY IN JOBS.MAX_SALARY%TYPE
)
IS
	CNT NUMBER := 0;
BEGIN
	SELECT COUNT(*) INTO CNT FROM JOBS WHERE JOB_ID=P_JOB_ID;
	IF CNT = 0 THEN 
	INSERT INTO JOBS(JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY)
	VALUES(P_JOB_ID, P_JOB_TITLE, P_MIN_SALARY, P_MAX_SALARY);
	DBMS_OUTPUT.ENABLE;
	DBMS_OUTPUT.PUT_LINE('INSERT ALL DONE ABOUT'||' '||P_JOB_ID);
	ELSE
	UPDATE JOBS
	SET JOB_TITLE=P_JOB_TITLE,
		MIN_SALARY=P_MIN_SALARY,
		MAX_SALARY=P_MAX_SALARY
	WHERE JOB_ID=P_JOB_ID;
	DBMS_OUTPUT.ENABLE;
	DBMS_OUTPUT.PUT_LINE('UPDATE ALL DONE ABOUT'||' '||P_JOB_ID);
	END IF;
	COMMIT;
END;

CALL 엄마나합격했어2('IT2','Developer',14000,30000);

SELECT * FROM JOBS;
----------------------------------------------------------------------
--JOB_ID를 외부에서 받아서 JOBS테이블에서 DELETE하는 프로시저 만들기
--틀 잡고 수정하기
CREATE OR REPLACE PROCEDURE JOBDELETE
(
	P_JOBS_ID IN JOBS.JOB_ID%TYPE
)
IS
BEGIN
END;
--Declaration에서
CREATE OR REPLACE PROCEDURE JOBDELETE
(
	P_JOBS_ID IN JOBS.JOB_ID%TYPE,
	T OUT DATE
)
IS
	CNT NUMBER := 0;
BEGIN
	SELECT COUNT(*) INTO CNT FROM JOBS WHERE JOB_ID=P_JOBS_ID;
	IF CNT=1 THEN
	DELETE FROM HR.JOBS
	WHERE JOB_ID=(SELECT JOB_ID FROM JOBS WHERE JOB_ID=P_JOBS_ID);
	DBMS_OUTPUT.ENABLE;
	DBMS_OUTPUT.PUT_LINE(P_JOBS_ID||'가 제거되었습니다.'||' 삭제시간'||T);
	ELSE
	DBMS_OUTPUT.ENABLE;
	DBMS_OUTPUT.PUT_LINE(P_JOBS_ID||'가 존재하지 않음');
	END IF;
	T := SYSDATE;
END;
--------------------------
--매개변수 수가 맞지않기 때문에
CALL JOBDELETE('IT');
--DECLARE통해서
DECLARE
	"TIME" DATE;
BEGIN
	JOBDELETE('IT',"TIME");
	DBMS_OUTPUT.PUT_LINE(TO_CHAR("TIME",'YYYY-MM-DD'));
END;